/*
 * File:   LED blinking.c
 * Author: Abhijit
 *
 * Created on April 26, 2025, 10:16 AM
 */

#pragma config OSC = HS //Oscillator Selection
#pragma config WDT = OFF //Disable Watchdog timer
#include <xc.h>
//Function Prototypes
void main()
{
TRISD=0; // ConfigurePortD as output Port.
LATD=0x01; // Turn on LED on PORT D pin0 As single bit use LAT
T0CON=0x07; // Prescaler= 1:256, 16-bit mode, Internal Clock
while(1)
{ // Values calculated for 1 second delay with 20MHz crystal
TMR0H=0xB3; // Placing higher byte in TMR0H
TMR0L=0xB4; // Placing Lower byte in TMR0L
T0CONbits.TMR0ON=1;// Timer0 On
while (INTCONbits.TMR0IF==0); // Wait until TMR0IF gets flagged
T0CONbits.TMR0ON=0; // Timer0 Off
INTCONbits.TMR0IF=0; // Clear Timer0 interrupt flag
LATD= (LATD<<1)| (LATD>>7); // Circular right right shift(<<)OR Left shift(>>)
}
}



BUZZER


/*
 * File:   buzzer on off.c
 * Author: Abhijit
 *
 * Created on April 26, 2025, 10:32 AM
 */

#include<xc.h> //Include Controller specific.h
// Timer0 ISR Definition
void interrupt ISR(void)
{
TMR0H=0X85; //Reload the timer values afteroverflow TMR0L
TMR0L=0XEE;
PORTBbits.RB3 = ~PORTBbits.RB3; //Toggle the RB3(~ bitwise NOT)
INTCONbits.TMR0IF = 0; //Reset the timer overflow interrupt flag
}
// Start of main Program void
main()
{
ADCON1=0x0F; //Configuring the PORTE pins as digital I/O
TRISBbits.RB3 = 0; //Configuring the RB3 as output
PORTBbits.RB3=0; //Setting the initialvalue
T0CON = 0x02; //Set the timer to 16-bit,Fosc/4,1:16 pre-scaler
TMR0H = 0x85; //load timer value to generate delay 50 ms
TMR0L =0xEE;
INTCONbits.TMR0IF =0; // Clear Timer0 overflowflag
INTCONbits.TMR0IE =1; // TMR0 interrupt enabled
T0CONbits.TMR0ON = 1; // Start timer0
INTCONbits.GIE=1; // Global interruptenabled
while(1); //Program execution stays here untilthe
}
